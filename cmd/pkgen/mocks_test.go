// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package main

import (
	"context"
	"log/slog"
	"text/template"

	"github.com/ifnotnil/pkgen"
	mock "github.com/stretchr/testify/mock"
	"golang.org/x/tools/go/packages"
)

// NewMockTemplates creates a new instance of MockTemplates. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTemplates(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTemplates {
	mock := &MockTemplates{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTemplates is an autogenerated mock type for the Templates type
type MockTemplates struct {
	mock.Mock
}

type MockTemplates_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTemplates) EXPECT() *MockTemplates_Expecter {
	return &MockTemplates_Expecter{mock: &_m.Mock}
}

// Get provides a mock function for the type MockTemplates
func (_mock *MockTemplates) Get(name string) (*template.Template, error) {
	ret := _mock.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *template.Template
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*template.Template, error)); ok {
		return returnFunc(name)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *template.Template); ok {
		r0 = returnFunc(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*template.Template)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTemplates_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockTemplates_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - name string
func (_e *MockTemplates_Expecter) Get(name interface{}) *MockTemplates_Get_Call {
	return &MockTemplates_Get_Call{Call: _e.mock.On("Get", name)}
}

func (_c *MockTemplates_Get_Call) Run(run func(name string)) *MockTemplates_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTemplates_Get_Call) Return(template1 *template.Template, err error) *MockTemplates_Get_Call {
	_c.Call.Return(template1, err)
	return _c
}

func (_c *MockTemplates_Get_Call) RunAndReturn(run func(name string) (*template.Template, error)) *MockTemplates_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function for the type MockTemplates
func (_mock *MockTemplates) GetAll(c pkgen.TemplateConfigs) ([]*template.Template, error) {
	ret := _mock.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []*template.Template
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(pkgen.TemplateConfigs) ([]*template.Template, error)); ok {
		return returnFunc(c)
	}
	if returnFunc, ok := ret.Get(0).(func(pkgen.TemplateConfigs) []*template.Template); ok {
		r0 = returnFunc(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*template.Template)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(pkgen.TemplateConfigs) error); ok {
		r1 = returnFunc(c)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTemplates_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockTemplates_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - c pkgen.TemplateConfigs
func (_e *MockTemplates_Expecter) GetAll(c interface{}) *MockTemplates_GetAll_Call {
	return &MockTemplates_GetAll_Call{Call: _e.mock.On("GetAll", c)}
}

func (_c *MockTemplates_GetAll_Call) Run(run func(c pkgen.TemplateConfigs)) *MockTemplates_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 pkgen.TemplateConfigs
		if args[0] != nil {
			arg0 = args[0].(pkgen.TemplateConfigs)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTemplates_GetAll_Call) Return(templates []*template.Template, err error) *MockTemplates_GetAll_Call {
	_c.Call.Return(templates, err)
	return _c
}

func (_c *MockTemplates_GetAll_Call) RunAndReturn(run func(c pkgen.TemplateConfigs) ([]*template.Template, error)) *MockTemplates_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPackages creates a new instance of MockPackages. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPackages(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPackages {
	mock := &MockPackages{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPackages is an autogenerated mock type for the Packages type
type MockPackages struct {
	mock.Mock
}

type MockPackages_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPackages) EXPECT() *MockPackages_Expecter {
	return &MockPackages_Expecter{mock: &_m.Mock}
}

// Query provides a mock function for the type MockPackages
func (_mock *MockPackages) Query(ctx context.Context, q pkgen.PackagesQueryConfig) ([]packages.Package, error) {
	ret := _mock.Called(ctx, q)

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 []packages.Package
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, pkgen.PackagesQueryConfig) ([]packages.Package, error)); ok {
		return returnFunc(ctx, q)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, pkgen.PackagesQueryConfig) []packages.Package); ok {
		r0 = returnFunc(ctx, q)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]packages.Package)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, pkgen.PackagesQueryConfig) error); ok {
		r1 = returnFunc(ctx, q)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPackages_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type MockPackages_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - ctx context.Context
//   - q pkgen.PackagesQueryConfig
func (_e *MockPackages_Expecter) Query(ctx interface{}, q interface{}) *MockPackages_Query_Call {
	return &MockPackages_Query_Call{Call: _e.mock.On("Query", ctx, q)}
}

func (_c *MockPackages_Query_Call) Run(run func(ctx context.Context, q pkgen.PackagesQueryConfig)) *MockPackages_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 pkgen.PackagesQueryConfig
		if args[1] != nil {
			arg1 = args[1].(pkgen.PackagesQueryConfig)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPackages_Query_Call) Return(packages1 []packages.Package, err error) *MockPackages_Query_Call {
	_c.Call.Return(packages1, err)
	return _c
}

func (_c *MockPackages_Query_Call) RunAndReturn(run func(ctx context.Context, q pkgen.PackagesQueryConfig) ([]packages.Package, error)) *MockPackages_Query_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGenerator creates a new instance of MockGenerator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGenerator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGenerator {
	mock := &MockGenerator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockGenerator is an autogenerated mock type for the Generator type
type MockGenerator struct {
	mock.Mock
}

type MockGenerator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGenerator) EXPECT() *MockGenerator_Expecter {
	return &MockGenerator_Expecter{mock: &_m.Mock}
}

// Generate provides a mock function for the type MockGenerator
func (_mock *MockGenerator) Generate(ctx context.Context, logger *slog.Logger, pkgs []packages.Package, tmps []*template.Template, cnf pkgen.GenerateConfig) error {
	ret := _mock.Called(ctx, logger, pkgs, tmps, cnf)

	if len(ret) == 0 {
		panic("no return value specified for Generate")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *slog.Logger, []packages.Package, []*template.Template, pkgen.GenerateConfig) error); ok {
		r0 = returnFunc(ctx, logger, pkgs, tmps, cnf)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockGenerator_Generate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Generate'
type MockGenerator_Generate_Call struct {
	*mock.Call
}

// Generate is a helper method to define mock.On call
//   - ctx context.Context
//   - logger *slog.Logger
//   - pkgs []packages.Package
//   - tmps []*template.Template
//   - cnf pkgen.GenerateConfig
func (_e *MockGenerator_Expecter) Generate(ctx interface{}, logger interface{}, pkgs interface{}, tmps interface{}, cnf interface{}) *MockGenerator_Generate_Call {
	return &MockGenerator_Generate_Call{Call: _e.mock.On("Generate", ctx, logger, pkgs, tmps, cnf)}
}

func (_c *MockGenerator_Generate_Call) Run(run func(ctx context.Context, logger *slog.Logger, pkgs []packages.Package, tmps []*template.Template, cnf pkgen.GenerateConfig)) *MockGenerator_Generate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *slog.Logger
		if args[1] != nil {
			arg1 = args[1].(*slog.Logger)
		}
		var arg2 []packages.Package
		if args[2] != nil {
			arg2 = args[2].([]packages.Package)
		}
		var arg3 []*template.Template
		if args[3] != nil {
			arg3 = args[3].([]*template.Template)
		}
		var arg4 pkgen.GenerateConfig
		if args[4] != nil {
			arg4 = args[4].(pkgen.GenerateConfig)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockGenerator_Generate_Call) Return(err error) *MockGenerator_Generate_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockGenerator_Generate_Call) RunAndReturn(run func(ctx context.Context, logger *slog.Logger, pkgs []packages.Package, tmps []*template.Template, cnf pkgen.GenerateConfig) error) *MockGenerator_Generate_Call {
	_c.Call.Return(run)
	return _c
}
