// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package pkgen

import (
	"os"

	mock "github.com/stretchr/testify/mock"
)

// NewMockFileWriter creates a new instance of MockFileWriter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFileWriter(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockFileWriter {
	mock := &MockFileWriter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockFileWriter is an autogenerated mock type for the FileWriter type
type MockFileWriter struct {
	mock.Mock
}

type MockFileWriter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFileWriter) EXPECT() *MockFileWriter_Expecter {
	return &MockFileWriter_Expecter{mock: &_m.Mock}
}

// WriteFile provides a mock function for the type MockFileWriter
func (_mock *MockFileWriter) WriteFile(name string, data []byte, perm os.FileMode) error {
	ret := _mock.Called(name, data, perm)

	if len(ret) == 0 {
		panic("no return value specified for WriteFile")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, []byte, os.FileMode) error); ok {
		r0 = returnFunc(name, data, perm)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockFileWriter_WriteFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteFile'
type MockFileWriter_WriteFile_Call struct {
	*mock.Call
}

// WriteFile is a helper method to define mock.On call
//   - name string
//   - data []byte
//   - perm os.FileMode
func (_e *MockFileWriter_Expecter) WriteFile(name interface{}, data interface{}, perm interface{}) *MockFileWriter_WriteFile_Call {
	return &MockFileWriter_WriteFile_Call{Call: _e.mock.On("WriteFile", name, data, perm)}
}

func (_c *MockFileWriter_WriteFile_Call) Run(run func(name string, data []byte, perm os.FileMode)) *MockFileWriter_WriteFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []byte
		if args[1] != nil {
			arg1 = args[1].([]byte)
		}
		var arg2 os.FileMode
		if args[2] != nil {
			arg2 = args[2].(os.FileMode)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockFileWriter_WriteFile_Call) Return(err error) *MockFileWriter_WriteFile_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFileWriter_WriteFile_Call) RunAndReturn(run func(name string, data []byte, perm os.FileMode) error) *MockFileWriter_WriteFile_Call {
	_c.Call.Return(run)
	return _c
}
